<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#pragma once

#include "S<#=g.PackageName#>/<#=g.FileName#>Service.h"
#include "TurboLinkGrpcManager_Private.h"
#include "pb/<#=System.IO.Path.ChangeExtension(g.ProtoFile.Name, "grpc.pb.h")#>"
<#
if(g.GetNoneClientStreamingFunctionCounts(g.ProtoFile)>0) {
#>
#include "<#=g.FileName#>Service_Private.generated.h"
<# 
} 
#>

<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
#>
class U<#=service.Name#>::Private
{
public:
	std::shared_ptr<UTurboLinkGrpcManager::Private::ServiceChannel> Channel;
	std::unique_ptr<::<#=g.PackageName#>::<#=service.Name#>::Stub> Stub;
};
<#
}
#>

<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
	foreach (MethodDescriptorProto method in service.Method)
	{
		if(!method.ClientStreaming) {
#>
UCLASS()
class U<#=service.Name#><#=method.Name#>LambdaWrapper : public UObject
{
	GENERATED_BODY()
public:
	UPROPERTY()
	U<#=service.Name#>Client* InnerClient;

	UFUNCTION()
	void OnResponse(FGrpcContextHandle Handle, const FGrpcResult& Result, const <#=g.GetMessageName(method.OutputType)#>& Response);
<#
if(method.ServerStreaming) 
{
#>
	UFUNCTION()
	void OnContextStateChanged(FGrpcContextHandle Handle, EGrpcContextState NewState);
<#
}
#>
public:
	FGrpcContextHandle Handle;
	U<#=service.Name#>::F<#=method.Name#>Lambda Lambda;
};

<#
		}
	}
}
#>
