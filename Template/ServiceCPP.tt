<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#include "S<#=g.PackageName#>/<#=g.PackageName#>Service.h"
#include "S<#=g.PackageName#>/<#=g.PackageName#>Client.h"
#include "<#=g.PackageName#>Service_Private.h"
#include "<#=g.PackageName#>Marshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"
<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
#>

U<#=service.Name#>::U<#=service.Name#>()
	: d(new U<#=service.Name#>::Private())
{
}

U<#=service.Name#>::~U<#=service.Name#>()
{
	delete d;
}

void U<#=service.Name#>::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("<#=service.Name#>"));

	UE_LOG(LogTurboLink, Warning, TEXT("Connect to <#=service.Name#>: '%s'"), *serviceEndPoint);

	d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	d->Stub = ::<#=g.PackageName#>::<#=service.Name#>::NewStub(d->Channel->RpcChannel);
	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (d->Channel->AttachedServices.size()>1)
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState U<#=service.Name#>::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

U<#=service.Name#>Client* U<#=service.Name#>::MakeClient()
{
	auto client = UGrpcService::MakeClient<U<#=service.Name#>Client>();
	return client;
}

void U<#=service.Name#>::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}
<#
	foreach (MethodDescriptorProto method in service.Method)
	{
		if(!method.ClientStreaming) {
#>

void U<#=service.Name#>::Call<#=method.Name#>(const <#=g.GetMessageName(method.InputType)#>& Request, F<#=method.Name#>Lambda Lambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	U<#=service.Name#><#=method.Name#>LambdaWrapper* lambdaWrapper = NewObject<U<#=service.Name#><#=method.Name#>LambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->Lambda = Lambda;
	lambdaWrapper->Handle = InnerClient->Init<#=method.Name#>();
	InnerClient->On<#=method.Name#>Response.AddUniqueDynamic(lambdaWrapper, &U<#=service.Name#><#=method.Name#>LambdaWrapper::OnResponse);
<#
			if(method.ServerStreaming) {
#>
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &U<#=service.Name#><#=method.Name#>LambdaWrapper::OnContextStateChanged);
<#
			}
#>
	InnerClient-><#=method.Name#>(lambdaWrapper->Handle, Request);
}
<#
		}
	}
#>
<#
}
#>
