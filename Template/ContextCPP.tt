<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#include "<#=g.PackageName#>Context.h"
#include "S<#=g.PackageName#>/<#=g.PackageName#>Client.h"
#include "<#=g.PackageName#>Service_Private.h"
#include "<#=g.PackageName#>Marshaling.h"
#include "TurboLinkGrpcManager.h"
<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
	foreach (MethodDescriptorProto method in service.Method)
	{
#>

GrpcContext_<#=service.Name#>_<#=method.Name#>::GrpcContext_<#=service.Name#>_<#=method.Name#>(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

<#if(method.ClientStreaming && method.ServerStreaming) { #>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::Init()
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	U<#=service.Name#>* service = (U<#=service.Name#>*)Service;
	RpcReaderWriter = service->d->Stub->Async<#=method.Name#>(RpcContext.get(), service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_<#=service.Name#>_<#=method.Name#>::Call(const <#=g.GetMessageName(method.InputType)#>& Request)
{
	<#=g.GetMessageGrpcName(method.InputType)#> rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	if (CanSend) {
		RpcReaderWriter->Write(rpcRequest, WriteTag);
		CanSend = false;
	}
	else {
		SendQueue.push_back(rpcRequest);
	}
}
<# }else if(method.ClientStreaming && !method.ServerStreaming) { #>
#pragma error("Client Streaming Not support yet!")
<# } else if(!method.ClientStreaming && method.ServerStreaming) { #>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::Call(const <#=g.GetMessageName(method.InputType)#>& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	<#=g.GetMessageGrpcName(method.InputType)#> rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	U<#=service.Name#>* service = (U<#=service.Name#>*)Service;
	RpcReaderWriter = service->d->Stub->Async<#=method.Name#>(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}
<#} else {#>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::Call(const <#=g.GetMessageName(method.InputType)#>& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	<#=g.GetMessageGrpcName(method.InputType)#> rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	U<#=service.Name#>* service = (U<#=service.Name#>*)Service;
	RpcReaderWriter = service->d->Stub->Async<#=method.Name#>(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}
<#}#>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, <#=g.GetMessageGrpcName(method.OutputType)#>* _RpcResponse) {
		U<#=service.Name#>Client* client = (U<#=service.Name#>Client*)(this->Client);
		if (!(client->On<#=method.Name#>Response.IsBound())) return;

		<#=g.GetMessageName(method.OutputType)#> response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->On<#=method.Name#>Response.Broadcast(Handle, _Result, response);
	});
}
<#
	}
}
#>
