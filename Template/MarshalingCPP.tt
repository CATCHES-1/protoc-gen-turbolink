<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#include "<#=s.CamelFileName#>Marshaling.h"
<#
foreach (string dependency in s.DependencyFiles)
{
#>
#include "<#=dependency#>Marshaling.h"
<#}#>

<# 
foreach(GrpcMessage message in s.MessageArray)
{
    GenerateMessageMarshalingDefine(message);
}
#>
<#+
private void ConvertFieldFromGrpcToTurboLink(GrpcMessageField field, string getField)
{
#>
<#+if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.String) { #>UTF8_TO_TCHAR(<#=getField#>.c_str())<#+
}else if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Bytes) {#>FBytes((const uint8*)<#=getField#>.c_str(), <#=getField#>.length())<#+
}else if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Enum) { #>StaticCast<<#=field.FieldType#>>(<#=getField#>)<#+}
else {#><#=getField#><#+}#>
<#+
}
#>
<#+
private void ConvertFieldFromTurboLinkToGrpc(GrpcMessageField field, string getField)
{
#>
<#+if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.String) { #>TCHAR_TO_UTF8(*(<#=getField#>))<#+
} else if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Bytes) { #>std::string((const char*)(<#=getField#>.Value.GetData()), (size_t)<#=getField#>.Value.Num())<#+
} else if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Enum) { #><#=field.FieldGrpcType#>(static_cast<uint8>(<#=getField#>))<#+
} else {#><#=getField#><#+}#>
<#+
}
#>
<#+
private void GenerateMessageMarshalingDefine(GrpcMessage message)
{
#>
void GRPC_TO_TURBOLINK(const ::<#=message.GrpcName#>* in, <#=message.Name#>* out)
{
<#+
    foreach(GrpcMessageField field in message.Fields)
    {
#>
<#+
if(field is GrpcMessageField_Map) {
    GrpcMessageField_Map mapField = (GrpcMessageField_Map)field;
#>
    for (const auto& item : in-><#=mapField.FieldGrpcName#>()) {
        auto& value = out-><#=mapField.FieldName#>.Add(<#+ConvertFieldFromGrpcToTurboLink(mapField.KeyField, "item.first");#>);
<#+if(mapField.ValueField.FieldDesc.Type==FieldDescriptorProto.Types.Type.Message) { #>
        GRPC_TO_TURBOLINK(&item.second, &value);
<#+} else {#>
        value = <#+ConvertFieldFromGrpcToTurboLink(mapField.ValueField, "item.second");#>;
<#+}#>
    }
<#+
} else if(field is GrpcMessageField_Repeated) { 
    GrpcMessageField_Repeated repeatedField = (GrpcMessageField_Repeated)field;
#>
    for (int i=0; i<in-><#=repeatedField.FieldGrpcName#>_size(); ++i) {
<#+if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Message) { #>
        GRPC_TO_TURBOLINK(&(in-><#=repeatedField.FieldGrpcName#>(i)), &(out-><#=repeatedField.FieldName#>.AddZeroed_GetRef()));
<#+} else { string getField = "in->"+repeatedField.FieldGrpcName+"(i)";  #>
        out-><#=repeatedField.FieldName#>.Add(<#+ConvertFieldFromGrpcToTurboLink(repeatedField.ItemField, getField);#>);
<#+}#>
    }
<#+} else {#>
<#+if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Message) { #>
    GRPC_TO_TURBOLINK(&(in-><#=field.FieldGrpcName#>()), &(out-><#=field.FieldName#>));
<#+} else { string getField = "in->"+field.FieldGrpcName+"()"; #>
    out-><#=field.FieldName#>=<#+ConvertFieldFromGrpcToTurboLink(field, getField);#>;
<#+}#>
<#+
    }
}
#>
}

void TURBOLINK_TO_GRPC(const <#=message.Name#>* in, ::<#=message.GrpcName#>* out)
{
<#+
    foreach(GrpcMessageField field in message.Fields)
    {
        var fieldsetName = "set_"+field.FieldGrpcName;
#>
<#+
if(field is GrpcMessageField_Map) {
    GrpcMessageField_Map mapField = (GrpcMessageField_Map)field;
#>
    for (const auto& item : in-><#=mapField.FieldName#>) {
<#+if(mapField.ValueField.FieldDesc.Type==FieldDescriptorProto.Types.Type.Message) { #>
        <#=mapField.ValueField.FieldGrpcType#> value;
        TURBOLINK_TO_GRPC(&item.Value, &value);
<#+}else {#>
        auto value = <#+ConvertFieldFromTurboLinkToGrpc(mapField.ValueField, "item.Value");#>;
<#+}#>
        (*(out->mutable_<#=mapField.FieldGrpcName#>()))[<#+ConvertFieldFromTurboLinkToGrpc(mapField.KeyField, "item.Key");#>] = value;
    }
<#+} else if(field is GrpcMessageField_Repeated) { #>
    for(const auto& value : in-><#=field.FieldName#>) {
<#+if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Message) { #>
        TURBOLINK_TO_GRPC(&value, out->add_<#=field.FieldGrpcName#>());
<#+} else {#>
        out->add_<#=field.FieldGrpcName#>(<#+ConvertFieldFromTurboLinkToGrpc(field, "value");#>);
<#+}#>
    } 
<#+} else { #>
<#+if(field.FieldDesc.Type==FieldDescriptorProto.Types.Type.Message) { #>
    TURBOLINK_TO_GRPC(&(in-><#=field.FieldName#>), out->mutable_<#=field.FieldGrpcName#>());
<#+} else { string getField = "in->"+field.FieldName; #>
    out-><#=fieldsetName#>(<#+ConvertFieldFromTurboLinkToGrpc(field, getField);#>);
<#+}#>
<#+ 
    }
}
#>
}

<#+
}
#>