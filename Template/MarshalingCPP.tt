<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#include "<#=g.FileName#>Marshaling.h"

<# 
List<string> parentNameList = new List<string>();
parentNameList = g.ProtoFile.Package.Split('.').ToList();

foreach(DescriptorProto message in g.ProtoFile.MessageType)
{
    GenerateMessageMarshalingDefine(message, parentNameList);
}
#>
<#+
private void ConvertFieldFromGrpcToTurboLink(FieldDescriptorProto field, string getField)
{
#>
<#+if(field.Type==FieldDescriptorProto.Types.Type.String) { #>UTF8_TO_TCHAR(<#=getField#>.c_str())<#+
}else if(field.Type==FieldDescriptorProto.Types.Type.Bytes) {#>FBytes((const uint8*)<#=getField#>.c_str(), <#=getField#>.length())<#+
}else if(field.Type==FieldDescriptorProto.Types.Type.Enum) { #>StaticCast<<#=g.GetFieldType(field)#>>(<#=getField#>)<#+}
else {#><#=getField#><#+}#>
<#+
}
#>
<#+
private void ConvertFieldFromTurboLinkToGrpc(FieldDescriptorProto field, string getField)
{
#>
<#+if(field.Type==FieldDescriptorProto.Types.Type.String) { #>TCHAR_TO_UTF8(*(<#=getField#>))<#+
} else if(field.Type==FieldDescriptorProto.Types.Type.Bytes) { #>std::string((const char*)(<#=getField#>.Value.GetData()), (size_t)<#=getField#>.Value.Num())<#+
} else if(field.Type==FieldDescriptorProto.Types.Type.Enum) { #><#=g.GetMessageGrpcName(field.TypeName)#>(static_cast<uint8>(<#=getField#>))<#+
} else {#><#=getField#><#+}#>
<#+
}
#>
<#+
private void GenerateMessageMarshalingDefine(DescriptorProto message, List<string> parentNameList)
{
	List<string> currentNameList = new List<string>(parentNameList);
	currentNameList.Add(message.Name);

	foreach(DescriptorProto messageInMsg in message.NestedType)
	{
		if(messageInMsg.Options!=null && messageInMsg.Options.MapEntry) continue;
		GenerateMessageMarshalingDefine(messageInMsg, currentNameList);
	}
#>
void GRPC_TO_TURBOLINK(const ::<#=g.PrintNameList(parentNameList, "::")#>::<#=message.Name#>* in, FGrpc<#=g.PrintNameList(parentNameList, string.Empty, true)#><#=message.Name#>* out)
{
<#+
    foreach(FieldDescriptorProto field in message.Field)
    {
        var fieldGetName = g.GetFieldGrpcName(field);
#>
<#+
bool isMapField;
FieldDescriptorProto keyField, valueField; 
(isMapField, keyField, valueField)=g.IsMapField(field, message);
if(isMapField) {
#>
    for (const auto& item : in-><#=g.GetFieldGrpcName(field)#>()) {
        auto& value = out-><#=g.GetFieldName(field)#>.Add(<#+ConvertFieldFromGrpcToTurboLink(keyField, "item.first");#>);
<#+if(valueField.Type==FieldDescriptorProto.Types.Type.Message) { #>
        GRPC_TO_TURBOLINK(&item.second, &value);
<#+} else {#>
        value = <#+ConvertFieldFromGrpcToTurboLink(valueField, "item.second");#>;
<#+}#>
    }
<#+
} else if(field.Label==FieldDescriptorProto.Types.Label.Repeated) { 
#>
    for (int i=0; i<in-><#=g.GetFieldGrpcName(field)#>_size(); ++i) {
<#+if(field.Type==FieldDescriptorProto.Types.Type.Message) { #>
        GRPC_TO_TURBOLINK(&(in-><#=fieldGetName#>(i)), &(out-><#=g.GetFieldName(field)#>.AddZeroed_GetRef()));
<#+} else { string getField = "in->"+fieldGetName+"(i)";  #>
        out-><#=g.GetFieldName(field)#>.Add(<#+ConvertFieldFromGrpcToTurboLink(field, getField);#>);
<#+}#>
    }
<#+} else {#>
<#+if(field.Type==FieldDescriptorProto.Types.Type.Message) { #>
    GRPC_TO_TURBOLINK(&(in-><#=fieldGetName#>()), &(out-><#=g.GetFieldName(field)#>));
<#+} else { string getField = "in->"+fieldGetName+"()"; #>
    out-><#=g.GetFieldName(field)#>=<#+ConvertFieldFromGrpcToTurboLink(field, getField);#>;
<#+}#>
<#+
    }
}
#>
}

void TURBOLINK_TO_GRPC(const FGrpc<#=g.PrintNameList(parentNameList, string.Empty, true)#><#=message.Name#>* in, ::<#=g.PrintNameList(parentNameList, "::")#>::<#=message.Name#>* out)
{
<#+
    foreach(FieldDescriptorProto field in message.Field)
    {
        var fieldsetName = "set_"+g.GetFieldGrpcName(field);
#>
<#+
bool isMapField;
FieldDescriptorProto keyField, valueField; 
(isMapField, keyField, valueField)=g.IsMapField(field, message);
if(isMapField) {
#>
    for (const auto& item : in-><#=g.GetFieldName(field)#>) {
<#+if(valueField.Type==FieldDescriptorProto.Types.Type.Message) { #>
        <#=g.GetMessageGrpcName(valueField.TypeName)#> value;
        TURBOLINK_TO_GRPC(&item.Value, &value);
<#+}else {#>
        auto value = <#+ConvertFieldFromTurboLinkToGrpc(valueField, "item.Value");#>;
<#+}#>
        (*(out->mutable_<#=g.GetFieldGrpcName(field)#>()))[<#+ConvertFieldFromTurboLinkToGrpc(keyField, "item.Key");#>] = value;
    }
<#+} else if(field.Label==FieldDescriptorProto.Types.Label.Repeated) { #>
    for(const auto& value : in-><#=g.GetFieldName(field)#>) {
<#+if(field.Type==FieldDescriptorProto.Types.Type.Message) { #>
        TURBOLINK_TO_GRPC(&value, out->add_<#=g.GetFieldGrpcName(field)#>());
<#+} else {#>
        out->add_<#=g.GetFieldGrpcName(field)#>(<#+ConvertFieldFromTurboLinkToGrpc(field, "value");#>);
<#+}#>
    } 
<#+} else { #>
<#+if(field.Type==FieldDescriptorProto.Types.Type.Message) { #>
    TURBOLINK_TO_GRPC(&(in-><#=g.GetFieldName(field)#>), out->mutable_<#=g.GetFieldGrpcName(field)#>());
<#+} else { string getField = "in->"+g.GetFieldName(field); #>
    out-><#=fieldsetName#>(<#+ConvertFieldFromTurboLinkToGrpc(field, getField);#>);
<#+}#>
<#+ 
    }
}
#>
}

<#+
}
#>