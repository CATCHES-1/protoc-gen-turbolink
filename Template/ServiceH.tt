<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcService.h"
#include "S<#=g.PackageName#>/<#=g.FileName#>Client.h"
<#
if(g.GetNoneClientStreamingFunctionCounts(g.ProtoFile)>0) {
#>
#include "<#=g.FileName#>Service.generated.h"

class UTurboLinkGrpcManager;
<# 
} 
#>

<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
#>
UCLASS(ClassGroup = TurboLink, BlueprintType)
class TURBOLINKGRPC_API U<#=service.Name#> : public UGrpcService
{
	GENERATED_BODY()
public:
	UFUNCTION(BlueprintCallable)
	virtual void Connect() override;
	
	UFUNCTION(BlueprintCallable)
	virtual EGrpcServiceState GetServiceState() const override;

	UFUNCTION(BlueprintCallable)
	U<#=service.Name#>Client* MakeClient();

private:
	virtual void Shutdown() override;

	UPROPERTY()
	U<#=service.Name#>Client* InnerClient; 
public:
<#
foreach (MethodDescriptorProto method in service.Method)
{
	if(!method.ClientStreaming) {
#>
	typedef TFunction<void(const FGrpcResult& Result, const <#=g.GetMessageName(method.OutputType)#>& Response)> F<#=method.Name#>Lambda;
	void Call<#=method.Name#>(const <#=g.GetMessageName(method.InputType)#>& Request, F<#=method.Name#>Lambda Lambda);

<#
	}
}
#>
public:
	class Private;
	Private* const d = nullptr;

public:
	U<#=service.Name#>();
	virtual ~U<#=service.Name#>();
};

<#
}
#>
