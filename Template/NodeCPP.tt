<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#include "S<#=g.PackageName#>/<#=g.FileName#>Node.h"
#include "S<#=g.PackageName#>/<#=g.FileName#>Service.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
	foreach (MethodDescriptorProto method in service.Method)
	{
		if(!method.ClientStreaming && !method.ServerStreaming) {
#>

UCall<#=service.Name#><#=method.Name#>* UCall<#=service.Name#><#=method.Name#>::<#=method.Name#>(UObject* WorldContextObject, const <#=g.GetMessageName(method.InputType)#>& Request)
{
	UCall<#=service.Name#><#=method.Name#>* node = NewObject<UCall<#=service.Name#><#=method.Name#>>();
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager();

	node-><#=service.Name#> = Cast<U<#=service.Name#>>(turboLinkManager->MakeService("<#=service.Name#>"));
	if (node-><#=service.Name#> == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node-><#=service.Name#>->OnServiceStateChanged.AddUniqueDynamic(node, &UCall<#=service.Name#><#=method.Name#>::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node-><#=service.Name#>->Connect();
	}));
	return node;
}

void UCall<#=service.Name#><#=method.Name#>::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		<#=g.GetMessageName(method.OutputType)#> response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		<#=service.Name#>Client = <#=service.Name#>->MakeClient();
		<#=service.Name#>Client->OnContextStateChange.AddUniqueDynamic(this, &UCall<#=service.Name#><#=method.Name#>::OnContextStateChange);
		<#=service.Name#>Client->On<#=method.Name#>Response.AddUniqueDynamic(this, &UCall<#=service.Name#><#=method.Name#>::OnResponse);

		Context = <#=service.Name#>Client->Init<#=method.Name#>();
		<#=service.Name#>Client-><#=method.Name#>(Context, Request);
	}
}

void UCall<#=service.Name#><#=method.Name#>::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCall<#=service.Name#><#=method.Name#>::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& Result, const <#=g.GetMessageName(method.OutputType)#>& Response)
{
	if (Result.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(Result, Response);
	}
	else
	{
		OnFail.Broadcast(Result, Response);
	}
}

void UCall<#=service.Name#><#=method.Name#>::Shutdown()
{
	<#=service.Name#>->OnServiceStateChanged.RemoveDynamic(this, &UCall<#=service.Name#><#=method.Name#>::OnServiceStateChanged);
	if (<#=service.Name#>Client != nullptr)
	{
		<#=service.Name#>->RemoveClient(<#=service.Name#>Client);
		<#=service.Name#>Client->Shutdown();
		<#=service.Name#>Client = nullptr;
	}

	if (<#=service.Name#> != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager()->ReleaseService(<#=service.Name#>);
		<#=service.Name#> = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
<#
		}
	}
}
#>
