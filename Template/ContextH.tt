<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcContext.h"
#include "S<#=g.PackageName#>/<#=g.FileName#>Message.h"
#include "S<#=g.PackageName#>/<#=g.FileName#>Marshaling.h"
<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
	foreach (MethodDescriptorProto method in service.Method)
	{
		var superClassName = g.GetContextType(method)+"<" + service.Name + "_" + method.Name + "_ReaderWriter, ";
		superClassName += g.GetMessageGrpcName(method.OutputType);
		if(method.ClientStreaming) 
			superClassName += ", " + g.GetMessageGrpcName(method.InputType);
		superClassName += ">";
#>
class GrpcContext_<#=service.Name#>_<#=method.Name#> : public <#=superClassName#>
{
	friend class U<#=service.Name#>Client;
	typedef <#=superClassName#> Super;

private:
<#
if(method.ClientStreaming) {
#>
	void Init();
<#}#>
	void Call(const <#=g.GetMessageName(method.InputType)#>& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_<#=service.Name#>_<#=method.Name#>(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

<#
	}
}
#>