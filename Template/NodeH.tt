<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "CoreMinimal.h"
#include "Kismet/BlueprintAsyncActionBase.h"
#include "TurboLinkGrpcClient.h"
#include "<#=g.FileName#>Message.h"
<#
if(g.ProtoFile.Service.Count>0) {
#>
#include "<#=g.FileName#>Node.generated.h"
<#
}
#>

<#
foreach (ServiceDescriptorProto service in g.ProtoFile.Service)
{
	int pingPongMethodCounts=0;
	foreach (MethodDescriptorProto method in service.Method) {
		if(!method.ClientStreaming && !method.ServerStreaming) pingPongMethodCounts++;
	}
	if(pingPongMethodCounts==0) continue;
#>
class U<#=service.Name#>;
class U<#=service.Name#>Client;
<#
foreach (MethodDescriptorProto method in service.Method)
{
	if(!method.ClientStreaming && !method.ServerStreaming) {
#>

UCLASS(ClassGroup = TurboLink)
class TURBOLINKGRPC_API UCall<#=service.Name#><#=method.Name#> : public UBlueprintAsyncActionBase
{
	GENERATED_BODY()

public:
	DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(F<#=service.Name#><#=method.Name#>Delegate, const FGrpcResult&, Result, const <#=g.GetMessageName(method.OutputType)#>&, Response);

	UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DisplayName = "Call <#=service.Name#> <#=method.Name#>"), Category = "TurboLink|<#=service.Name#>")
	static UCall<#=service.Name#><#=method.Name#>* <#=method.Name#>(UObject* WorldContextObject, const <#=g.GetMessageName(method.InputType)#>& Request);

	UPROPERTY(BlueprintAssignable)
	F<#=service.Name#><#=method.Name#>Delegate OnSuccess;

	UPROPERTY(BlueprintAssignable)
	F<#=service.Name#><#=method.Name#>Delegate OnFail;

private:
	UPROPERTY()
	U<#=service.Name#>* <#=service.Name#>;
	
	UPROPERTY()
	U<#=service.Name#>Client* <#=service.Name#>Client;
	
	FGrpcContextHandle Context;
	<#=g.GetMessageName(method.InputType)#> Request;

	UFUNCTION()
	void OnServiceStateChanged(EGrpcServiceState NewState);
	
	UFUNCTION()
	void OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State);

	UFUNCTION()
	void OnResponse(FGrpcContextHandle Handle, const FGrpcResult& Result, const <#=g.GetMessageName(method.OutputType)#>& Response);

	void Shutdown();
};
<#
	}
}
}
#>
